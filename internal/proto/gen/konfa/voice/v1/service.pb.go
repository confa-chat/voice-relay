// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        (unknown)
// source: konfa/voice/v1/service.proto

package voicev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type JoinChannelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServerId      string                 `protobuf:"bytes,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	ChannelId     string                 `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId        string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinChannelRequest) Reset() {
	*x = JoinChannelRequest{}
	mi := &file_konfa_voice_v1_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinChannelRequest) ProtoMessage() {}

func (x *JoinChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_konfa_voice_v1_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinChannelRequest.ProtoReflect.Descriptor instead.
func (*JoinChannelRequest) Descriptor() ([]byte, []int) {
	return file_konfa_voice_v1_service_proto_rawDescGZIP(), []int{0}
}

func (x *JoinChannelRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *JoinChannelRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *JoinChannelRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type JoinChannelResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to State:
	//
	//	*JoinChannelResponse_UsersState
	State         isJoinChannelResponse_State `protobuf_oneof:"state"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinChannelResponse) Reset() {
	*x = JoinChannelResponse{}
	mi := &file_konfa_voice_v1_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinChannelResponse) ProtoMessage() {}

func (x *JoinChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_konfa_voice_v1_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinChannelResponse.ProtoReflect.Descriptor instead.
func (*JoinChannelResponse) Descriptor() ([]byte, []int) {
	return file_konfa_voice_v1_service_proto_rawDescGZIP(), []int{1}
}

func (x *JoinChannelResponse) GetState() isJoinChannelResponse_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *JoinChannelResponse) GetUsersState() *UsersState {
	if x != nil {
		if x, ok := x.State.(*JoinChannelResponse_UsersState); ok {
			return x.UsersState
		}
	}
	return nil
}

type isJoinChannelResponse_State interface {
	isJoinChannelResponse_State()
}

type JoinChannelResponse_UsersState struct {
	UsersState *UsersState `protobuf:"bytes,1,opt,name=users_state,json=usersState,proto3,oneof"`
}

func (*JoinChannelResponse_UsersState) isJoinChannelResponse_State() {}

type UsersState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserIds       []string               `protobuf:"bytes,1,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UsersState) Reset() {
	*x = UsersState{}
	mi := &file_konfa_voice_v1_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UsersState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersState) ProtoMessage() {}

func (x *UsersState) ProtoReflect() protoreflect.Message {
	mi := &file_konfa_voice_v1_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersState.ProtoReflect.Descriptor instead.
func (*UsersState) Descriptor() ([]byte, []int) {
	return file_konfa_voice_v1_service_proto_rawDescGZIP(), []int{2}
}

func (x *UsersState) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type SpeakToChannelRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Request:
	//
	//	*SpeakToChannelRequest_VoiceInfo
	//	*SpeakToChannelRequest_VoiceData
	Request       isSpeakToChannelRequest_Request `protobuf_oneof:"request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpeakToChannelRequest) Reset() {
	*x = SpeakToChannelRequest{}
	mi := &file_konfa_voice_v1_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpeakToChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeakToChannelRequest) ProtoMessage() {}

func (x *SpeakToChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_konfa_voice_v1_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeakToChannelRequest.ProtoReflect.Descriptor instead.
func (*SpeakToChannelRequest) Descriptor() ([]byte, []int) {
	return file_konfa_voice_v1_service_proto_rawDescGZIP(), []int{3}
}

func (x *SpeakToChannelRequest) GetRequest() isSpeakToChannelRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *SpeakToChannelRequest) GetVoiceInfo() *VoiceInfo {
	if x != nil {
		if x, ok := x.Request.(*SpeakToChannelRequest_VoiceInfo); ok {
			return x.VoiceInfo
		}
	}
	return nil
}

func (x *SpeakToChannelRequest) GetVoiceData() *VoiceData {
	if x != nil {
		if x, ok := x.Request.(*SpeakToChannelRequest_VoiceData); ok {
			return x.VoiceData
		}
	}
	return nil
}

type isSpeakToChannelRequest_Request interface {
	isSpeakToChannelRequest_Request()
}

type SpeakToChannelRequest_VoiceInfo struct {
	VoiceInfo *VoiceInfo `protobuf:"bytes,1,opt,name=voice_info,json=voiceInfo,proto3,oneof"`
}

type SpeakToChannelRequest_VoiceData struct {
	VoiceData *VoiceData `protobuf:"bytes,2,opt,name=voice_data,json=voiceData,proto3,oneof"`
}

func (*SpeakToChannelRequest_VoiceInfo) isSpeakToChannelRequest_Request() {}

func (*SpeakToChannelRequest_VoiceData) isSpeakToChannelRequest_Request() {}

type SpeakToChannelResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpeakToChannelResponse) Reset() {
	*x = SpeakToChannelResponse{}
	mi := &file_konfa_voice_v1_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpeakToChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeakToChannelResponse) ProtoMessage() {}

func (x *SpeakToChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_konfa_voice_v1_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeakToChannelResponse.ProtoReflect.Descriptor instead.
func (*SpeakToChannelResponse) Descriptor() ([]byte, []int) {
	return file_konfa_voice_v1_service_proto_rawDescGZIP(), []int{4}
}

type ListenToUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VoiceInfo     *VoiceInfo             `protobuf:"bytes,1,opt,name=voice_info,json=voiceInfo,proto3" json:"voice_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListenToUserRequest) Reset() {
	*x = ListenToUserRequest{}
	mi := &file_konfa_voice_v1_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListenToUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenToUserRequest) ProtoMessage() {}

func (x *ListenToUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_konfa_voice_v1_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenToUserRequest.ProtoReflect.Descriptor instead.
func (*ListenToUserRequest) Descriptor() ([]byte, []int) {
	return file_konfa_voice_v1_service_proto_rawDescGZIP(), []int{5}
}

func (x *ListenToUserRequest) GetVoiceInfo() *VoiceInfo {
	if x != nil {
		return x.VoiceInfo
	}
	return nil
}

type ListenToUserResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*ListenToUserResponse_VoiceInfo
	//	*ListenToUserResponse_VoiceData
	Response      isListenToUserResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListenToUserResponse) Reset() {
	*x = ListenToUserResponse{}
	mi := &file_konfa_voice_v1_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListenToUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenToUserResponse) ProtoMessage() {}

func (x *ListenToUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_konfa_voice_v1_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenToUserResponse.ProtoReflect.Descriptor instead.
func (*ListenToUserResponse) Descriptor() ([]byte, []int) {
	return file_konfa_voice_v1_service_proto_rawDescGZIP(), []int{6}
}

func (x *ListenToUserResponse) GetResponse() isListenToUserResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ListenToUserResponse) GetVoiceInfo() *VoiceInfo {
	if x != nil {
		if x, ok := x.Response.(*ListenToUserResponse_VoiceInfo); ok {
			return x.VoiceInfo
		}
	}
	return nil
}

func (x *ListenToUserResponse) GetVoiceData() *VoiceData {
	if x != nil {
		if x, ok := x.Response.(*ListenToUserResponse_VoiceData); ok {
			return x.VoiceData
		}
	}
	return nil
}

type isListenToUserResponse_Response interface {
	isListenToUserResponse_Response()
}

type ListenToUserResponse_VoiceInfo struct {
	VoiceInfo *VoiceInfo `protobuf:"bytes,1,opt,name=voice_info,json=voiceInfo,proto3,oneof"`
}

type ListenToUserResponse_VoiceData struct {
	VoiceData *VoiceData `protobuf:"bytes,2,opt,name=voice_data,json=voiceData,proto3,oneof"`
}

func (*ListenToUserResponse_VoiceInfo) isListenToUserResponse_Response() {}

func (*ListenToUserResponse_VoiceData) isListenToUserResponse_Response() {}

var File_konfa_voice_v1_service_proto protoreflect.FileDescriptor

var file_konfa_voice_v1_service_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x6b, 0x6f, 0x6e, 0x66, 0x61, 0x2f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e,
	0x6b, 0x6f, 0x6e, 0x66, 0x61, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1a,
	0x6b, 0x6f, 0x6e, 0x66, 0x61, 0x2f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x69, 0x0a, 0x12, 0x4a, 0x6f,
	0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x13, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x6f, 0x6e, 0x66, 0x61, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x27, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x9a, 0x01,
	0x0a, 0x15, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x6f,
	0x6e, 0x66, 0x61, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x09, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x0a, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x6f, 0x6e, 0x66, 0x61, 0x2e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x09, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x18, 0x0a, 0x16, 0x53, 0x70,
	0x65, 0x61, 0x6b, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x54, 0x6f,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6b, 0x6f, 0x6e, 0x66, 0x61, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x9a, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x0a, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x6f, 0x6e, 0x66, 0x61, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52,
	0x09, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x0a, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6b, 0x6f, 0x6e, 0x66, 0x61, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x09, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0xae, 0x02, 0x0a, 0x0c, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x0e, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x54, 0x6f, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x25, 0x2e, 0x6b, 0x6f, 0x6e, 0x66, 0x61, 0x2e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x54, 0x6f, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6b,
	0x6f, 0x6e, 0x66, 0x61, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70,
	0x65, 0x61, 0x6b, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x5d, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x6b, 0x6f, 0x6e, 0x66, 0x61,
	0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x6b, 0x6f, 0x6e, 0x66, 0x61, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x5a, 0x0a, 0x0b, 0x4a, 0x6f, 0x69, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x22, 0x2e, 0x6b, 0x6f, 0x6e, 0x66, 0x61, 0x2e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6b, 0x6f, 0x6e,
	0x66, 0x61, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x69, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x30, 0x01, 0x42, 0x86, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x6f, 0x6e, 0x66,
	0x61, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x08, 0x2f, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x4b, 0x56, 0x58, 0xaa, 0x02, 0x0e, 0x4b, 0x6f, 0x6e,
	0x66, 0x61, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0e, 0x4b, 0x6f,
	0x6e, 0x66, 0x61, 0x5c, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1a, 0x4b,
	0x6f, 0x6e, 0x66, 0x61, 0x5c, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x10, 0x4b, 0x6f, 0x6e, 0x66,
	0x61, 0x3a, 0x3a, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_konfa_voice_v1_service_proto_rawDescOnce sync.Once
	file_konfa_voice_v1_service_proto_rawDescData = file_konfa_voice_v1_service_proto_rawDesc
)

func file_konfa_voice_v1_service_proto_rawDescGZIP() []byte {
	file_konfa_voice_v1_service_proto_rawDescOnce.Do(func() {
		file_konfa_voice_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_konfa_voice_v1_service_proto_rawDescData)
	})
	return file_konfa_voice_v1_service_proto_rawDescData
}

var file_konfa_voice_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_konfa_voice_v1_service_proto_goTypes = []any{
	(*JoinChannelRequest)(nil),     // 0: konfa.voice.v1.JoinChannelRequest
	(*JoinChannelResponse)(nil),    // 1: konfa.voice.v1.JoinChannelResponse
	(*UsersState)(nil),             // 2: konfa.voice.v1.UsersState
	(*SpeakToChannelRequest)(nil),  // 3: konfa.voice.v1.SpeakToChannelRequest
	(*SpeakToChannelResponse)(nil), // 4: konfa.voice.v1.SpeakToChannelResponse
	(*ListenToUserRequest)(nil),    // 5: konfa.voice.v1.ListenToUserRequest
	(*ListenToUserResponse)(nil),   // 6: konfa.voice.v1.ListenToUserResponse
	(*VoiceInfo)(nil),              // 7: konfa.voice.v1.VoiceInfo
	(*VoiceData)(nil),              // 8: konfa.voice.v1.VoiceData
}
var file_konfa_voice_v1_service_proto_depIdxs = []int32{
	2, // 0: konfa.voice.v1.JoinChannelResponse.users_state:type_name -> konfa.voice.v1.UsersState
	7, // 1: konfa.voice.v1.SpeakToChannelRequest.voice_info:type_name -> konfa.voice.v1.VoiceInfo
	8, // 2: konfa.voice.v1.SpeakToChannelRequest.voice_data:type_name -> konfa.voice.v1.VoiceData
	7, // 3: konfa.voice.v1.ListenToUserRequest.voice_info:type_name -> konfa.voice.v1.VoiceInfo
	7, // 4: konfa.voice.v1.ListenToUserResponse.voice_info:type_name -> konfa.voice.v1.VoiceInfo
	8, // 5: konfa.voice.v1.ListenToUserResponse.voice_data:type_name -> konfa.voice.v1.VoiceData
	3, // 6: konfa.voice.v1.VoiceService.SpeakToChannel:input_type -> konfa.voice.v1.SpeakToChannelRequest
	5, // 7: konfa.voice.v1.VoiceService.ListenToUser:input_type -> konfa.voice.v1.ListenToUserRequest
	0, // 8: konfa.voice.v1.VoiceService.JoinChannel:input_type -> konfa.voice.v1.JoinChannelRequest
	4, // 9: konfa.voice.v1.VoiceService.SpeakToChannel:output_type -> konfa.voice.v1.SpeakToChannelResponse
	6, // 10: konfa.voice.v1.VoiceService.ListenToUser:output_type -> konfa.voice.v1.ListenToUserResponse
	1, // 11: konfa.voice.v1.VoiceService.JoinChannel:output_type -> konfa.voice.v1.JoinChannelResponse
	9, // [9:12] is the sub-list for method output_type
	6, // [6:9] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_konfa_voice_v1_service_proto_init() }
func file_konfa_voice_v1_service_proto_init() {
	if File_konfa_voice_v1_service_proto != nil {
		return
	}
	file_konfa_voice_v1_voice_proto_init()
	file_konfa_voice_v1_service_proto_msgTypes[1].OneofWrappers = []any{
		(*JoinChannelResponse_UsersState)(nil),
	}
	file_konfa_voice_v1_service_proto_msgTypes[3].OneofWrappers = []any{
		(*SpeakToChannelRequest_VoiceInfo)(nil),
		(*SpeakToChannelRequest_VoiceData)(nil),
	}
	file_konfa_voice_v1_service_proto_msgTypes[6].OneofWrappers = []any{
		(*ListenToUserResponse_VoiceInfo)(nil),
		(*ListenToUserResponse_VoiceData)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_konfa_voice_v1_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_konfa_voice_v1_service_proto_goTypes,
		DependencyIndexes: file_konfa_voice_v1_service_proto_depIdxs,
		MessageInfos:      file_konfa_voice_v1_service_proto_msgTypes,
	}.Build()
	File_konfa_voice_v1_service_proto = out.File
	file_konfa_voice_v1_service_proto_rawDesc = nil
	file_konfa_voice_v1_service_proto_goTypes = nil
	file_konfa_voice_v1_service_proto_depIdxs = nil
}
