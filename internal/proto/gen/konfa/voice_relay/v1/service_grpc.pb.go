// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: konfa/voice_relay/v1/service.proto

package voice_relayv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VoiceRelayService_SpeakToChannel_FullMethodName = "/konfa.voice_relay.v1.VoiceRelayService/SpeakToChannel"
	VoiceRelayService_ListenToUser_FullMethodName   = "/konfa.voice_relay.v1.VoiceRelayService/ListenToUser"
	VoiceRelayService_JoinChannel_FullMethodName    = "/konfa.voice_relay.v1.VoiceRelayService/JoinChannel"
)

// VoiceRelayServiceClient is the client API for VoiceRelayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VoiceRelayServiceClient interface {
	SpeakToChannel(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SpeakToChannelRequest, SpeakToChannelResponse], error)
	ListenToUser(ctx context.Context, in *ListenToUserRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListenToUserResponse], error)
	JoinChannel(ctx context.Context, in *JoinChannelRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[JoinChannelResponse], error)
}

type voiceRelayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVoiceRelayServiceClient(cc grpc.ClientConnInterface) VoiceRelayServiceClient {
	return &voiceRelayServiceClient{cc}
}

func (c *voiceRelayServiceClient) SpeakToChannel(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SpeakToChannelRequest, SpeakToChannelResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VoiceRelayService_ServiceDesc.Streams[0], VoiceRelayService_SpeakToChannel_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SpeakToChannelRequest, SpeakToChannelResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VoiceRelayService_SpeakToChannelClient = grpc.ClientStreamingClient[SpeakToChannelRequest, SpeakToChannelResponse]

func (c *voiceRelayServiceClient) ListenToUser(ctx context.Context, in *ListenToUserRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListenToUserResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VoiceRelayService_ServiceDesc.Streams[1], VoiceRelayService_ListenToUser_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListenToUserRequest, ListenToUserResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VoiceRelayService_ListenToUserClient = grpc.ServerStreamingClient[ListenToUserResponse]

func (c *voiceRelayServiceClient) JoinChannel(ctx context.Context, in *JoinChannelRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[JoinChannelResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VoiceRelayService_ServiceDesc.Streams[2], VoiceRelayService_JoinChannel_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[JoinChannelRequest, JoinChannelResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VoiceRelayService_JoinChannelClient = grpc.ServerStreamingClient[JoinChannelResponse]

// VoiceRelayServiceServer is the server API for VoiceRelayService service.
// All implementations should embed UnimplementedVoiceRelayServiceServer
// for forward compatibility.
type VoiceRelayServiceServer interface {
	SpeakToChannel(grpc.ClientStreamingServer[SpeakToChannelRequest, SpeakToChannelResponse]) error
	ListenToUser(*ListenToUserRequest, grpc.ServerStreamingServer[ListenToUserResponse]) error
	JoinChannel(*JoinChannelRequest, grpc.ServerStreamingServer[JoinChannelResponse]) error
}

// UnimplementedVoiceRelayServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVoiceRelayServiceServer struct{}

func (UnimplementedVoiceRelayServiceServer) SpeakToChannel(grpc.ClientStreamingServer[SpeakToChannelRequest, SpeakToChannelResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SpeakToChannel not implemented")
}
func (UnimplementedVoiceRelayServiceServer) ListenToUser(*ListenToUserRequest, grpc.ServerStreamingServer[ListenToUserResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ListenToUser not implemented")
}
func (UnimplementedVoiceRelayServiceServer) JoinChannel(*JoinChannelRequest, grpc.ServerStreamingServer[JoinChannelResponse]) error {
	return status.Errorf(codes.Unimplemented, "method JoinChannel not implemented")
}
func (UnimplementedVoiceRelayServiceServer) testEmbeddedByValue() {}

// UnsafeVoiceRelayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VoiceRelayServiceServer will
// result in compilation errors.
type UnsafeVoiceRelayServiceServer interface {
	mustEmbedUnimplementedVoiceRelayServiceServer()
}

func RegisterVoiceRelayServiceServer(s grpc.ServiceRegistrar, srv VoiceRelayServiceServer) {
	// If the following call pancis, it indicates UnimplementedVoiceRelayServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VoiceRelayService_ServiceDesc, srv)
}

func _VoiceRelayService_SpeakToChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VoiceRelayServiceServer).SpeakToChannel(&grpc.GenericServerStream[SpeakToChannelRequest, SpeakToChannelResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VoiceRelayService_SpeakToChannelServer = grpc.ClientStreamingServer[SpeakToChannelRequest, SpeakToChannelResponse]

func _VoiceRelayService_ListenToUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenToUserRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VoiceRelayServiceServer).ListenToUser(m, &grpc.GenericServerStream[ListenToUserRequest, ListenToUserResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VoiceRelayService_ListenToUserServer = grpc.ServerStreamingServer[ListenToUserResponse]

func _VoiceRelayService_JoinChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JoinChannelRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VoiceRelayServiceServer).JoinChannel(m, &grpc.GenericServerStream[JoinChannelRequest, JoinChannelResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VoiceRelayService_JoinChannelServer = grpc.ServerStreamingServer[JoinChannelResponse]

// VoiceRelayService_ServiceDesc is the grpc.ServiceDesc for VoiceRelayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VoiceRelayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "konfa.voice_relay.v1.VoiceRelayService",
	HandlerType: (*VoiceRelayServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SpeakToChannel",
			Handler:       _VoiceRelayService_SpeakToChannel_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ListenToUser",
			Handler:       _VoiceRelayService_ListenToUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "JoinChannel",
			Handler:       _VoiceRelayService_JoinChannel_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "konfa/voice_relay/v1/service.proto",
}
