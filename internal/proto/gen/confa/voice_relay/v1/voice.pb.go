// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: confa/voice_relay/v1/voice.proto

package voice_relayv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AudioCodec int32

const (
	AudioCodec_AUDIO_CODEC_UNSPECIFIED AudioCodec = 0
	AudioCodec_AUDIO_CODEC_PCM_F32     AudioCodec = 1
	AudioCodec_AUDIO_CODEC_OPUS        AudioCodec = 2
)

// Enum value maps for AudioCodec.
var (
	AudioCodec_name = map[int32]string{
		0: "AUDIO_CODEC_UNSPECIFIED",
		1: "AUDIO_CODEC_PCM_F32",
		2: "AUDIO_CODEC_OPUS",
	}
	AudioCodec_value = map[string]int32{
		"AUDIO_CODEC_UNSPECIFIED": 0,
		"AUDIO_CODEC_PCM_F32":     1,
		"AUDIO_CODEC_OPUS":        2,
	}
)

func (x AudioCodec) Enum() *AudioCodec {
	p := new(AudioCodec)
	*p = x
	return p
}

func (x AudioCodec) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AudioCodec) Descriptor() protoreflect.EnumDescriptor {
	return file_confa_voice_relay_v1_voice_proto_enumTypes[0].Descriptor()
}

func (AudioCodec) Type() protoreflect.EnumType {
	return &file_confa_voice_relay_v1_voice_proto_enumTypes[0]
}

func (x AudioCodec) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AudioCodec.Descriptor instead.
func (AudioCodec) EnumDescriptor() ([]byte, []int) {
	return file_confa_voice_relay_v1_voice_proto_rawDescGZIP(), []int{0}
}

type SendMeta struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendMeta) Reset() {
	*x = SendMeta{}
	mi := &file_confa_voice_relay_v1_voice_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMeta) ProtoMessage() {}

func (x *SendMeta) ProtoReflect() protoreflect.Message {
	mi := &file_confa_voice_relay_v1_voice_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMeta.ProtoReflect.Descriptor instead.
func (*SendMeta) Descriptor() ([]byte, []int) {
	return file_confa_voice_relay_v1_voice_proto_rawDescGZIP(), []int{0}
}

type VoiceInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServerId      string                 `protobuf:"bytes,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	ChannelId     string                 `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId        string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Codec         AudioCodec             `protobuf:"varint,4,opt,name=codec,proto3,enum=confa.voice_relay.v1.AudioCodec" json:"codec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VoiceInfo) Reset() {
	*x = VoiceInfo{}
	mi := &file_confa_voice_relay_v1_voice_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VoiceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceInfo) ProtoMessage() {}

func (x *VoiceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_confa_voice_relay_v1_voice_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceInfo.ProtoReflect.Descriptor instead.
func (*VoiceInfo) Descriptor() ([]byte, []int) {
	return file_confa_voice_relay_v1_voice_proto_rawDescGZIP(), []int{1}
}

func (x *VoiceInfo) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *VoiceInfo) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *VoiceInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *VoiceInfo) GetCodec() AudioCodec {
	if x != nil {
		return x.Codec
	}
	return AudioCodec_AUDIO_CODEC_UNSPECIFIED
}

type ReceiveMeta struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReceiveMeta) Reset() {
	*x = ReceiveMeta{}
	mi := &file_confa_voice_relay_v1_voice_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceiveMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveMeta) ProtoMessage() {}

func (x *ReceiveMeta) ProtoReflect() protoreflect.Message {
	mi := &file_confa_voice_relay_v1_voice_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveMeta.ProtoReflect.Descriptor instead.
func (*ReceiveMeta) Descriptor() ([]byte, []int) {
	return file_confa_voice_relay_v1_voice_proto_rawDescGZIP(), []int{2}
}

type VoiceData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VoiceData) Reset() {
	*x = VoiceData{}
	mi := &file_confa_voice_relay_v1_voice_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VoiceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceData) ProtoMessage() {}

func (x *VoiceData) ProtoReflect() protoreflect.Message {
	mi := &file_confa_voice_relay_v1_voice_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceData.ProtoReflect.Descriptor instead.
func (*VoiceData) Descriptor() ([]byte, []int) {
	return file_confa_voice_relay_v1_voice_proto_rawDescGZIP(), []int{3}
}

func (x *VoiceData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_confa_voice_relay_v1_voice_proto protoreflect.FileDescriptor

const file_confa_voice_relay_v1_voice_proto_rawDesc = "" +
	"\n" +
	" confa/voice_relay/v1/voice.proto\x12\x14confa.voice_relay.v1\"\n" +
	"\n" +
	"\bSendMeta\"\x98\x01\n" +
	"\tVoiceInfo\x12\x1b\n" +
	"\tserver_id\x18\x01 \x01(\tR\bserverId\x12\x1d\n" +
	"\n" +
	"channel_id\x18\x02 \x01(\tR\tchannelId\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\tR\x06userId\x126\n" +
	"\x05codec\x18\x04 \x01(\x0e2 .confa.voice_relay.v1.AudioCodecR\x05codec\"\r\n" +
	"\vReceiveMeta\"\x1f\n" +
	"\tVoiceData\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data*X\n" +
	"\n" +
	"AudioCodec\x12\x1b\n" +
	"\x17AUDIO_CODEC_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13AUDIO_CODEC_PCM_F32\x10\x01\x12\x14\n" +
	"\x10AUDIO_CODEC_OPUS\x10\x02B\xa4\x01\n" +
	"\x18com.confa.voice_relay.v1B\n" +
	"VoiceProtoP\x01Z\x0e/voice_relayv1\xa2\x02\x03CVX\xaa\x02\x13Confa.VoiceRelay.V1\xca\x02\x13Confa\\VoiceRelay\\V1\xe2\x02\x1fConfa\\VoiceRelay\\V1\\GPBMetadata\xea\x02\x15Confa::VoiceRelay::V1b\x06proto3"

var (
	file_confa_voice_relay_v1_voice_proto_rawDescOnce sync.Once
	file_confa_voice_relay_v1_voice_proto_rawDescData []byte
)

func file_confa_voice_relay_v1_voice_proto_rawDescGZIP() []byte {
	file_confa_voice_relay_v1_voice_proto_rawDescOnce.Do(func() {
		file_confa_voice_relay_v1_voice_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_confa_voice_relay_v1_voice_proto_rawDesc), len(file_confa_voice_relay_v1_voice_proto_rawDesc)))
	})
	return file_confa_voice_relay_v1_voice_proto_rawDescData
}

var file_confa_voice_relay_v1_voice_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_confa_voice_relay_v1_voice_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_confa_voice_relay_v1_voice_proto_goTypes = []any{
	(AudioCodec)(0),     // 0: confa.voice_relay.v1.AudioCodec
	(*SendMeta)(nil),    // 1: confa.voice_relay.v1.SendMeta
	(*VoiceInfo)(nil),   // 2: confa.voice_relay.v1.VoiceInfo
	(*ReceiveMeta)(nil), // 3: confa.voice_relay.v1.ReceiveMeta
	(*VoiceData)(nil),   // 4: confa.voice_relay.v1.VoiceData
}
var file_confa_voice_relay_v1_voice_proto_depIdxs = []int32{
	0, // 0: confa.voice_relay.v1.VoiceInfo.codec:type_name -> confa.voice_relay.v1.AudioCodec
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_confa_voice_relay_v1_voice_proto_init() }
func file_confa_voice_relay_v1_voice_proto_init() {
	if File_confa_voice_relay_v1_voice_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_confa_voice_relay_v1_voice_proto_rawDesc), len(file_confa_voice_relay_v1_voice_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_confa_voice_relay_v1_voice_proto_goTypes,
		DependencyIndexes: file_confa_voice_relay_v1_voice_proto_depIdxs,
		EnumInfos:         file_confa_voice_relay_v1_voice_proto_enumTypes,
		MessageInfos:      file_confa_voice_relay_v1_voice_proto_msgTypes,
	}.Build()
	File_confa_voice_relay_v1_voice_proto = out.File
	file_confa_voice_relay_v1_voice_proto_goTypes = nil
	file_confa_voice_relay_v1_voice_proto_depIdxs = nil
}
