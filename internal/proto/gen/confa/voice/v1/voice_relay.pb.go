// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: confa/voice/v1/voice_relay.proto

package voicev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type JoinChannelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServerId      string                 `protobuf:"bytes,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	ChannelId     string                 `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId        string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinChannelRequest) Reset() {
	*x = JoinChannelRequest{}
	mi := &file_confa_voice_v1_voice_relay_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinChannelRequest) ProtoMessage() {}

func (x *JoinChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_confa_voice_v1_voice_relay_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinChannelRequest.ProtoReflect.Descriptor instead.
func (*JoinChannelRequest) Descriptor() ([]byte, []int) {
	return file_confa_voice_v1_voice_relay_proto_rawDescGZIP(), []int{0}
}

func (x *JoinChannelRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *JoinChannelRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *JoinChannelRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type JoinChannelResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to State:
	//
	//	*JoinChannelResponse_UsersState
	State         isJoinChannelResponse_State `protobuf_oneof:"state"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinChannelResponse) Reset() {
	*x = JoinChannelResponse{}
	mi := &file_confa_voice_v1_voice_relay_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinChannelResponse) ProtoMessage() {}

func (x *JoinChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_confa_voice_v1_voice_relay_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinChannelResponse.ProtoReflect.Descriptor instead.
func (*JoinChannelResponse) Descriptor() ([]byte, []int) {
	return file_confa_voice_v1_voice_relay_proto_rawDescGZIP(), []int{1}
}

func (x *JoinChannelResponse) GetState() isJoinChannelResponse_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *JoinChannelResponse) GetUsersState() *UsersState {
	if x != nil {
		if x, ok := x.State.(*JoinChannelResponse_UsersState); ok {
			return x.UsersState
		}
	}
	return nil
}

type isJoinChannelResponse_State interface {
	isJoinChannelResponse_State()
}

type JoinChannelResponse_UsersState struct {
	UsersState *UsersState `protobuf:"bytes,1,opt,name=users_state,json=usersState,proto3,oneof"`
}

func (*JoinChannelResponse_UsersState) isJoinChannelResponse_State() {}

type UsersState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserIds       []string               `protobuf:"bytes,1,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UsersState) Reset() {
	*x = UsersState{}
	mi := &file_confa_voice_v1_voice_relay_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UsersState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersState) ProtoMessage() {}

func (x *UsersState) ProtoReflect() protoreflect.Message {
	mi := &file_confa_voice_v1_voice_relay_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersState.ProtoReflect.Descriptor instead.
func (*UsersState) Descriptor() ([]byte, []int) {
	return file_confa_voice_v1_voice_relay_proto_rawDescGZIP(), []int{2}
}

func (x *UsersState) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type SpeakToChannelRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Request:
	//
	//	*SpeakToChannelRequest_VoiceInfo
	//	*SpeakToChannelRequest_VoiceData
	Request       isSpeakToChannelRequest_Request `protobuf_oneof:"request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpeakToChannelRequest) Reset() {
	*x = SpeakToChannelRequest{}
	mi := &file_confa_voice_v1_voice_relay_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpeakToChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeakToChannelRequest) ProtoMessage() {}

func (x *SpeakToChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_confa_voice_v1_voice_relay_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeakToChannelRequest.ProtoReflect.Descriptor instead.
func (*SpeakToChannelRequest) Descriptor() ([]byte, []int) {
	return file_confa_voice_v1_voice_relay_proto_rawDescGZIP(), []int{3}
}

func (x *SpeakToChannelRequest) GetRequest() isSpeakToChannelRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *SpeakToChannelRequest) GetVoiceInfo() *VoiceInfo {
	if x != nil {
		if x, ok := x.Request.(*SpeakToChannelRequest_VoiceInfo); ok {
			return x.VoiceInfo
		}
	}
	return nil
}

func (x *SpeakToChannelRequest) GetVoiceData() *VoiceData {
	if x != nil {
		if x, ok := x.Request.(*SpeakToChannelRequest_VoiceData); ok {
			return x.VoiceData
		}
	}
	return nil
}

type isSpeakToChannelRequest_Request interface {
	isSpeakToChannelRequest_Request()
}

type SpeakToChannelRequest_VoiceInfo struct {
	VoiceInfo *VoiceInfo `protobuf:"bytes,1,opt,name=voice_info,json=voiceInfo,proto3,oneof"`
}

type SpeakToChannelRequest_VoiceData struct {
	VoiceData *VoiceData `protobuf:"bytes,2,opt,name=voice_data,json=voiceData,proto3,oneof"`
}

func (*SpeakToChannelRequest_VoiceInfo) isSpeakToChannelRequest_Request() {}

func (*SpeakToChannelRequest_VoiceData) isSpeakToChannelRequest_Request() {}

type SpeakToChannelResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpeakToChannelResponse) Reset() {
	*x = SpeakToChannelResponse{}
	mi := &file_confa_voice_v1_voice_relay_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpeakToChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeakToChannelResponse) ProtoMessage() {}

func (x *SpeakToChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_confa_voice_v1_voice_relay_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeakToChannelResponse.ProtoReflect.Descriptor instead.
func (*SpeakToChannelResponse) Descriptor() ([]byte, []int) {
	return file_confa_voice_v1_voice_relay_proto_rawDescGZIP(), []int{4}
}

type ListenToUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VoiceInfo     *VoiceInfo             `protobuf:"bytes,1,opt,name=voice_info,json=voiceInfo,proto3" json:"voice_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListenToUserRequest) Reset() {
	*x = ListenToUserRequest{}
	mi := &file_confa_voice_v1_voice_relay_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListenToUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenToUserRequest) ProtoMessage() {}

func (x *ListenToUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_confa_voice_v1_voice_relay_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenToUserRequest.ProtoReflect.Descriptor instead.
func (*ListenToUserRequest) Descriptor() ([]byte, []int) {
	return file_confa_voice_v1_voice_relay_proto_rawDescGZIP(), []int{5}
}

func (x *ListenToUserRequest) GetVoiceInfo() *VoiceInfo {
	if x != nil {
		return x.VoiceInfo
	}
	return nil
}

type ListenToUserResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*ListenToUserResponse_VoiceInfo
	//	*ListenToUserResponse_VoiceData
	Response      isListenToUserResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListenToUserResponse) Reset() {
	*x = ListenToUserResponse{}
	mi := &file_confa_voice_v1_voice_relay_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListenToUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenToUserResponse) ProtoMessage() {}

func (x *ListenToUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_confa_voice_v1_voice_relay_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenToUserResponse.ProtoReflect.Descriptor instead.
func (*ListenToUserResponse) Descriptor() ([]byte, []int) {
	return file_confa_voice_v1_voice_relay_proto_rawDescGZIP(), []int{6}
}

func (x *ListenToUserResponse) GetResponse() isListenToUserResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ListenToUserResponse) GetVoiceInfo() *VoiceInfo {
	if x != nil {
		if x, ok := x.Response.(*ListenToUserResponse_VoiceInfo); ok {
			return x.VoiceInfo
		}
	}
	return nil
}

func (x *ListenToUserResponse) GetVoiceData() *VoiceData {
	if x != nil {
		if x, ok := x.Response.(*ListenToUserResponse_VoiceData); ok {
			return x.VoiceData
		}
	}
	return nil
}

type isListenToUserResponse_Response interface {
	isListenToUserResponse_Response()
}

type ListenToUserResponse_VoiceInfo struct {
	VoiceInfo *VoiceInfo `protobuf:"bytes,1,opt,name=voice_info,json=voiceInfo,proto3,oneof"`
}

type ListenToUserResponse_VoiceData struct {
	VoiceData *VoiceData `protobuf:"bytes,2,opt,name=voice_data,json=voiceData,proto3,oneof"`
}

func (*ListenToUserResponse_VoiceInfo) isListenToUserResponse_Response() {}

func (*ListenToUserResponse_VoiceData) isListenToUserResponse_Response() {}

type WatchChannelRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Request:
	//
	//	*WatchChannelRequest_RequestSingle
	Request       isWatchChannelRequest_Request `protobuf_oneof:"request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WatchChannelRequest) Reset() {
	*x = WatchChannelRequest{}
	mi := &file_confa_voice_v1_voice_relay_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchChannelRequest) ProtoMessage() {}

func (x *WatchChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_confa_voice_v1_voice_relay_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchChannelRequest.ProtoReflect.Descriptor instead.
func (*WatchChannelRequest) Descriptor() ([]byte, []int) {
	return file_confa_voice_v1_voice_relay_proto_rawDescGZIP(), []int{7}
}

func (x *WatchChannelRequest) GetRequest() isWatchChannelRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *WatchChannelRequest) GetRequestSingle() *WatchChannelRequestSingle {
	if x != nil {
		if x, ok := x.Request.(*WatchChannelRequest_RequestSingle); ok {
			return x.RequestSingle
		}
	}
	return nil
}

type isWatchChannelRequest_Request interface {
	isWatchChannelRequest_Request()
}

type WatchChannelRequest_RequestSingle struct {
	RequestSingle *WatchChannelRequestSingle `protobuf:"bytes,1,opt,name=request_single,json=requestSingle,proto3,oneof"`
}

func (*WatchChannelRequest_RequestSingle) isWatchChannelRequest_Request() {}

type WatchChannelRequestSingle struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServerId      string                 `protobuf:"bytes,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	ChannelId     string                 `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WatchChannelRequestSingle) Reset() {
	*x = WatchChannelRequestSingle{}
	mi := &file_confa_voice_v1_voice_relay_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchChannelRequestSingle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchChannelRequestSingle) ProtoMessage() {}

func (x *WatchChannelRequestSingle) ProtoReflect() protoreflect.Message {
	mi := &file_confa_voice_v1_voice_relay_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchChannelRequestSingle.ProtoReflect.Descriptor instead.
func (*WatchChannelRequestSingle) Descriptor() ([]byte, []int) {
	return file_confa_voice_v1_voice_relay_proto_rawDescGZIP(), []int{8}
}

func (x *WatchChannelRequestSingle) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *WatchChannelRequestSingle) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

type WatchChannelResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServerId      string                 `protobuf:"bytes,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	ChannelId     string                 `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UsersState    *UsersState            `protobuf:"bytes,3,opt,name=users_state,json=usersState,proto3" json:"users_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WatchChannelResponse) Reset() {
	*x = WatchChannelResponse{}
	mi := &file_confa_voice_v1_voice_relay_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchChannelResponse) ProtoMessage() {}

func (x *WatchChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_confa_voice_v1_voice_relay_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchChannelResponse.ProtoReflect.Descriptor instead.
func (*WatchChannelResponse) Descriptor() ([]byte, []int) {
	return file_confa_voice_v1_voice_relay_proto_rawDescGZIP(), []int{9}
}

func (x *WatchChannelResponse) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *WatchChannelResponse) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *WatchChannelResponse) GetUsersState() *UsersState {
	if x != nil {
		return x.UsersState
	}
	return nil
}

var File_confa_voice_v1_voice_relay_proto protoreflect.FileDescriptor

const file_confa_voice_v1_voice_relay_proto_rawDesc = "" +
	"\n" +
	" confa/voice/v1/voice_relay.proto\x12\x0econfa.voice.v1\x1a\x1aconfa/voice/v1/voice.proto\"i\n" +
	"\x12JoinChannelRequest\x12\x1b\n" +
	"\tserver_id\x18\x01 \x01(\tR\bserverId\x12\x1d\n" +
	"\n" +
	"channel_id\x18\x02 \x01(\tR\tchannelId\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\tR\x06userId\"]\n" +
	"\x13JoinChannelResponse\x12=\n" +
	"\vusers_state\x18\x01 \x01(\v2\x1a.confa.voice.v1.UsersStateH\x00R\n" +
	"usersStateB\a\n" +
	"\x05state\"'\n" +
	"\n" +
	"UsersState\x12\x19\n" +
	"\buser_ids\x18\x01 \x03(\tR\auserIds\"\x9a\x01\n" +
	"\x15SpeakToChannelRequest\x12:\n" +
	"\n" +
	"voice_info\x18\x01 \x01(\v2\x19.confa.voice.v1.VoiceInfoH\x00R\tvoiceInfo\x12:\n" +
	"\n" +
	"voice_data\x18\x02 \x01(\v2\x19.confa.voice.v1.VoiceDataH\x00R\tvoiceDataB\t\n" +
	"\arequest\"\x18\n" +
	"\x16SpeakToChannelResponse\"O\n" +
	"\x13ListenToUserRequest\x128\n" +
	"\n" +
	"voice_info\x18\x01 \x01(\v2\x19.confa.voice.v1.VoiceInfoR\tvoiceInfo\"\x9a\x01\n" +
	"\x14ListenToUserResponse\x12:\n" +
	"\n" +
	"voice_info\x18\x01 \x01(\v2\x19.confa.voice.v1.VoiceInfoH\x00R\tvoiceInfo\x12:\n" +
	"\n" +
	"voice_data\x18\x02 \x01(\v2\x19.confa.voice.v1.VoiceDataH\x00R\tvoiceDataB\n" +
	"\n" +
	"\bresponse\"t\n" +
	"\x13WatchChannelRequest\x12R\n" +
	"\x0erequest_single\x18\x01 \x01(\v2).confa.voice.v1.WatchChannelRequestSingleH\x00R\rrequestSingleB\t\n" +
	"\arequest\"W\n" +
	"\x19WatchChannelRequestSingle\x12\x1b\n" +
	"\tserver_id\x18\x01 \x01(\tR\bserverId\x12\x1d\n" +
	"\n" +
	"channel_id\x18\x02 \x01(\tR\tchannelId\"\x8f\x01\n" +
	"\x14WatchChannelResponse\x12\x1b\n" +
	"\tserver_id\x18\x01 \x01(\tR\bserverId\x12\x1d\n" +
	"\n" +
	"channel_id\x18\x02 \x01(\tR\tchannelId\x12;\n" +
	"\vusers_state\x18\x03 \x01(\v2\x1a.confa.voice.v1.UsersStateR\n" +
	"usersState2\x92\x03\n" +
	"\x11VoiceRelayService\x12c\n" +
	"\x0eSpeakToChannel\x12%.confa.voice.v1.SpeakToChannelRequest\x1a&.confa.voice.v1.SpeakToChannelResponse\"\x00(\x01\x12]\n" +
	"\fListenToUser\x12#.confa.voice.v1.ListenToUserRequest\x1a$.confa.voice.v1.ListenToUserResponse\"\x000\x01\x12Z\n" +
	"\vJoinChannel\x12\".confa.voice.v1.JoinChannelRequest\x1a#.confa.voice.v1.JoinChannelResponse\"\x000\x01\x12]\n" +
	"\fWatchChannel\x12#.confa.voice.v1.WatchChannelRequest\x1a$.confa.voice.v1.WatchChannelResponse\"\x000\x01B\x89\x01\n" +
	"\x12com.confa.voice.v1B\x0fVoiceRelayProtoP\x01Z\b/voicev1\xa2\x02\x03CVX\xaa\x02\x0eConfa.Voice.V1\xca\x02\x0eConfa\\Voice\\V1\xe2\x02\x1aConfa\\Voice\\V1\\GPBMetadata\xea\x02\x10Confa::Voice::V1b\x06proto3"

var (
	file_confa_voice_v1_voice_relay_proto_rawDescOnce sync.Once
	file_confa_voice_v1_voice_relay_proto_rawDescData []byte
)

func file_confa_voice_v1_voice_relay_proto_rawDescGZIP() []byte {
	file_confa_voice_v1_voice_relay_proto_rawDescOnce.Do(func() {
		file_confa_voice_v1_voice_relay_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_confa_voice_v1_voice_relay_proto_rawDesc), len(file_confa_voice_v1_voice_relay_proto_rawDesc)))
	})
	return file_confa_voice_v1_voice_relay_proto_rawDescData
}

var file_confa_voice_v1_voice_relay_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_confa_voice_v1_voice_relay_proto_goTypes = []any{
	(*JoinChannelRequest)(nil),        // 0: confa.voice.v1.JoinChannelRequest
	(*JoinChannelResponse)(nil),       // 1: confa.voice.v1.JoinChannelResponse
	(*UsersState)(nil),                // 2: confa.voice.v1.UsersState
	(*SpeakToChannelRequest)(nil),     // 3: confa.voice.v1.SpeakToChannelRequest
	(*SpeakToChannelResponse)(nil),    // 4: confa.voice.v1.SpeakToChannelResponse
	(*ListenToUserRequest)(nil),       // 5: confa.voice.v1.ListenToUserRequest
	(*ListenToUserResponse)(nil),      // 6: confa.voice.v1.ListenToUserResponse
	(*WatchChannelRequest)(nil),       // 7: confa.voice.v1.WatchChannelRequest
	(*WatchChannelRequestSingle)(nil), // 8: confa.voice.v1.WatchChannelRequestSingle
	(*WatchChannelResponse)(nil),      // 9: confa.voice.v1.WatchChannelResponse
	(*VoiceInfo)(nil),                 // 10: confa.voice.v1.VoiceInfo
	(*VoiceData)(nil),                 // 11: confa.voice.v1.VoiceData
}
var file_confa_voice_v1_voice_relay_proto_depIdxs = []int32{
	2,  // 0: confa.voice.v1.JoinChannelResponse.users_state:type_name -> confa.voice.v1.UsersState
	10, // 1: confa.voice.v1.SpeakToChannelRequest.voice_info:type_name -> confa.voice.v1.VoiceInfo
	11, // 2: confa.voice.v1.SpeakToChannelRequest.voice_data:type_name -> confa.voice.v1.VoiceData
	10, // 3: confa.voice.v1.ListenToUserRequest.voice_info:type_name -> confa.voice.v1.VoiceInfo
	10, // 4: confa.voice.v1.ListenToUserResponse.voice_info:type_name -> confa.voice.v1.VoiceInfo
	11, // 5: confa.voice.v1.ListenToUserResponse.voice_data:type_name -> confa.voice.v1.VoiceData
	8,  // 6: confa.voice.v1.WatchChannelRequest.request_single:type_name -> confa.voice.v1.WatchChannelRequestSingle
	2,  // 7: confa.voice.v1.WatchChannelResponse.users_state:type_name -> confa.voice.v1.UsersState
	3,  // 8: confa.voice.v1.VoiceRelayService.SpeakToChannel:input_type -> confa.voice.v1.SpeakToChannelRequest
	5,  // 9: confa.voice.v1.VoiceRelayService.ListenToUser:input_type -> confa.voice.v1.ListenToUserRequest
	0,  // 10: confa.voice.v1.VoiceRelayService.JoinChannel:input_type -> confa.voice.v1.JoinChannelRequest
	7,  // 11: confa.voice.v1.VoiceRelayService.WatchChannel:input_type -> confa.voice.v1.WatchChannelRequest
	4,  // 12: confa.voice.v1.VoiceRelayService.SpeakToChannel:output_type -> confa.voice.v1.SpeakToChannelResponse
	6,  // 13: confa.voice.v1.VoiceRelayService.ListenToUser:output_type -> confa.voice.v1.ListenToUserResponse
	1,  // 14: confa.voice.v1.VoiceRelayService.JoinChannel:output_type -> confa.voice.v1.JoinChannelResponse
	9,  // 15: confa.voice.v1.VoiceRelayService.WatchChannel:output_type -> confa.voice.v1.WatchChannelResponse
	12, // [12:16] is the sub-list for method output_type
	8,  // [8:12] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_confa_voice_v1_voice_relay_proto_init() }
func file_confa_voice_v1_voice_relay_proto_init() {
	if File_confa_voice_v1_voice_relay_proto != nil {
		return
	}
	file_confa_voice_v1_voice_proto_init()
	file_confa_voice_v1_voice_relay_proto_msgTypes[1].OneofWrappers = []any{
		(*JoinChannelResponse_UsersState)(nil),
	}
	file_confa_voice_v1_voice_relay_proto_msgTypes[3].OneofWrappers = []any{
		(*SpeakToChannelRequest_VoiceInfo)(nil),
		(*SpeakToChannelRequest_VoiceData)(nil),
	}
	file_confa_voice_v1_voice_relay_proto_msgTypes[6].OneofWrappers = []any{
		(*ListenToUserResponse_VoiceInfo)(nil),
		(*ListenToUserResponse_VoiceData)(nil),
	}
	file_confa_voice_v1_voice_relay_proto_msgTypes[7].OneofWrappers = []any{
		(*WatchChannelRequest_RequestSingle)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_confa_voice_v1_voice_relay_proto_rawDesc), len(file_confa_voice_v1_voice_relay_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_confa_voice_v1_voice_relay_proto_goTypes,
		DependencyIndexes: file_confa_voice_v1_voice_relay_proto_depIdxs,
		MessageInfos:      file_confa_voice_v1_voice_relay_proto_msgTypes,
	}.Build()
	File_confa_voice_v1_voice_relay_proto = out.File
	file_confa_voice_v1_voice_relay_proto_goTypes = nil
	file_confa_voice_v1_voice_relay_proto_depIdxs = nil
}
